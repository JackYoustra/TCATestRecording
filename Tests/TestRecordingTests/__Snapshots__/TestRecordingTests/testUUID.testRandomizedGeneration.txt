// AUTOGENERATED FILE

import ComposableArchitecture
import XCTest
import TestRecording
@testable import TestRecordingTests

class TestRecordingTestsTests: XCTestCase {

    func testRecording() throws {
        let logURL = URL(string: "<##LOG_LOCATION##>")!
        let decoding = try ReplayRecord<TestRecordingTests.State, TestRecordingTests.Action, TestRecording.DependencyAction>.init(url: logURL)
        let store = TestStore(
            initialState: decoding.start,
            reducer: TestRecordingTests()
        )

        // store.dependencies = {"setUUID":{"_0":"00000000-0000-0000-0000-000000000000"}}"
        decoding.replayActions[0].asDependencySet!.resetDependency(on: &store.dependencies)
        
        // change:
        // - TestRecordingTests.UUIDReducer.State(uuid: UUID(00000000-0000-0000-0000-0000A3D2AFB5))
        // + TestRecordingTests.UUIDReducer.State(uuid: UUID(00000000-0000-0000-0000-000000000000))
        
        let quantum1 = decoding.replayActions[1].asQuantum!
        store.send(quantum1.action) {
          $0 = quantum1.result
        }
        
        // store.dependencies = {"setUUID":{"_0":"00000000-0000-0000-0000-000000000034"}}"
        decoding.replayActions[2].asDependencySet!.resetDependency(on: &store.dependencies)
        
        // change:
        // - TestRecordingTests.UUIDReducer.State(uuid: UUID(00000000-0000-0000-0000-000000000000))
        // + TestRecordingTests.UUIDReducer.State(uuid: UUID(00000000-0000-0000-0000-000000000034))
        
        let quantum3 = decoding.replayActions[3].asQuantum!
        store.send(quantum3.action) {
          $0 = quantum3.result
        }
        
        
    }
}